services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: search_ehou_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - search_ehou_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: search_ehou_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - search_ehou_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: search_ehou_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - search_ehou_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: search_ehou_backend
    restart: unless-stopped
    environment:
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SYNCHRONIZE=false
      - DB_LOGGING=false
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - CACHE_TTL=${CACHE_TTL}
      - CACHE_MAX_ITEMS=${CACHE_MAX_ITEMS}
      # Elasticsearch
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      # Application
      - PORT=3000
      - NODE_ENV=${NODE_ENV}
      # Swagger
      - SWAGGER_TITLE=${SWAGGER_TITLE}
      - SWAGGER_DESCRIPTION=${SWAGGER_DESCRIPTION}
      - SWAGGER_VERSION=${SWAGGER_VERSION}
      # Performance
      - PERFORMANCE_MONITORING_ENABLED=${PERFORMANCE_MONITORING_ENABLED}
      - PERFORMANCE_SLOW_REQUEST_THRESHOLD=${PERFORMANCE_SLOW_REQUEST_THRESHOLD}
      - PERFORMANCE_MAX_METRICS=${PERFORMANCE_MAX_METRICS}
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      # Data Protection
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY}
      - BACKUP_ENABLED=${BACKUP_ENABLED}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
      - BACKUP_PATH=${BACKUP_PATH}
      - BACKUP_INCLUDE_AUDIT_LOGS=${BACKUP_INCLUDE_AUDIT_LOGS}
      - BACKUP_COMPRESSION=${BACKUP_COMPRESSION}
      - BACKUP_ENCRYPTION=${BACKUP_ENCRYPTION}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      # Data Retention
      - DATA_RETENTION_QUESTIONS_DAYS=${DATA_RETENTION_QUESTIONS_DAYS}
      - DATA_RETENTION_COURSES_DAYS=${DATA_RETENTION_COURSES_DAYS}
      - DATA_RETENTION_AUDIT_LOGS_DAYS=${DATA_RETENTION_AUDIT_LOGS_DAYS}
      - DATA_RETENTION_SEARCH_LOGS_DAYS=${DATA_RETENTION_SEARCH_LOGS_DAYS}
      - DATA_ANONYMIZE_QUESTIONS_DAYS=${DATA_ANONYMIZE_QUESTIONS_DAYS}
      - DATA_ANONYMIZE_COURSES_DAYS=${DATA_ANONYMIZE_COURSES_DAYS}
      - DATA_ANONYMIZE_SEARCH_LOGS_DAYS=${DATA_ANONYMIZE_SEARCH_LOGS_DAYS}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - search_ehou_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  search_ehou_network:
    driver: bridge
